{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","messageStart","messageLose","messageWin","gameScore","gameField","score","rows","columns","board","getRandomCell","hasEmptyCell","r","Math","floor","random","c","updateGame","winGame","classList","remove","loseGame","resetBoard","table","forEach","el","splice","cell","children","num","textContent","value","add","slide","row","newRow","filter","i","length","push","moveLeft","moveRight","reverse","moveUp","moveDown","addEventListener","ev","key"],"mappings":"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","file":"main.bb779536.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('tbody');\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomCell() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  const r = Math.floor(Math.random() * rows);\n  const c = Math.floor(Math.random() * columns);\n\n  if (board[r][c] === 0) {\n    board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    updateGame();\n  } else {\n    getRandomCell();\n  }\n}\n\nfunction hasEmptyCell() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction winGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n\nfunction loseGame() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1] || board[r][c] === board[r + 1][c]) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction resetBoard(table) {\n  return table.forEach(el => el.splice(0, columns, 0, 0, 0, 0));\n}\n\nstartButton.addEventListener('click', () => {\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  score = 0;\n  gameScore.textContent = score;\n\n  resetBoard(board);\n\n  getRandomCell();\n  getRandomCell();\n});\n\nfunction updateGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.children[r].children[c];\n      const num = board[r][c];\n\n      cell.textContent = '';\n      cell.classList.value = '';\n      cell.classList.add('field-cell');\n\n      if (num > 0) {\n        cell.classList.add(`field-cell--${num}`);\n        cell.textContent = num;\n      }\n    }\n  }\n}\n\ndocument.addEventListener('keydown', ev => {\n  switch (ev.key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n  }\n\n  gameScore.textContent = score;\n\n  loseGame();\n  winGame();\n  getRandomCell();\n});\n\nfunction slide(row) {\n  let newRow = row.filter(el => el !== 0);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n\n  newRow = newRow.filter(el => el !== 0);\n\n  while (newRow.length < rows) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide(row);\n\n    board[r] = newRow;\n\n    updateGame();\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    const row = board[r];\n\n    const newRow = slide([...row].reverse());\n\n    board[r] = newRow.reverse();\n\n    updateGame();\n  }\n}\n\nfunction moveUp() {\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide(row);\n\n    board[0][c] = newRow[0];\n    board[1][c] = newRow[1];\n    board[2][c] = newRow[2];\n    board[3][c] = newRow[3];\n\n    updateGame();\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < columns; c++) {\n    const row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    const newRow = slide([...row].reverse());\n\n    newRow.reverse();\n\n    board[0][c] = newRow[0];\n    board[1][c] = newRow[1];\n    board[2][c] = newRow[2];\n    board[3][c] = newRow[3];\n\n    updateGame();\n  }\n}\n"]}